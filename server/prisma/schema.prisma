datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String   @id @default(cuid())
    googleId      String   @unique
    email         String   @unique
    emailVerified Boolean  @default(false)
    firstName     String?
    lastName      String?
    displayName   String?
    profileImage  String?
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    // New fields for user preferences
    learningGoals String?
    academicLevel String?
    interests     String?

    // Relationships
    googleAuth  GoogleAuth?
    userAPIKey  UserAPIKey?
    quizzes     Quiz[]
    testAttempts TestAttempt[]
}

model UserAPIKey {
    id        String   @id @default(cuid())
    userId    String   @unique
    apiKey    String   @db.Text // Store the user's Google API key - MUST BE ENCRYPTED AT REST
    isValid   Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model GoogleAuth {
    id           String   @id @default(cuid())
    accessToken  String
    refreshToken String?
    idToken      String   @db.Text // Using Text type as JWT tokens can be quite long
    tokenType    String
    scope        String
    expiryDate   DateTime

    // Relationship with User
    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Quiz {
    id                   String     @id @default(cuid())
    userId               String
    title                String? // New field for quiz title
    config               Json
    maxNos               Int
    currentNos           Int        @default(0)
    status               QuizStatus @default(STARTING)
    originalContentSummary String? // New field for content summary
    createdAt            DateTime   @default(now())
    updatedAt            DateTime   @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    quizQuestions QuizQuestion[]
    testAttempts  TestAttempt[]
}

enum QuizStatus {
    STARTING
    GENERATING
    COMPLETED
    FAILED
}

model QuizQuestion {
    id            String       @id @default(cuid())
    quizId        String
    question      String
    options       String[]
    correctOption Int
    questionType  QuestionType
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt

    quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
}

enum QuestionType {
    MULTIPLE_CHOICE
    TRUE_FALSE
    SHORT_ANSWER
}

model TestAttempt {
    id                  String   @id @default(cuid())
    userId              String
    quizId              String
    score               Float
    correctAnswersCount Int
    incorrectAnswersCount Int
    userAnswers         Json // Store an array of objects: [{ quizQuestionId: "...", selectedOptionIndex: N }]
    feedback            Json // Store AI-generated feedback (overall + per-question)
    takenAt             DateTime @default(now())
    createdAt           DateTime @default(now())
    updatedAt           DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)
}