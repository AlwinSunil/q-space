datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id            String   @id @default(cuid())
    googleId      String   @unique
    email         String   @unique
    emailVerified Boolean  @default(false)
    firstName     String?
    lastName      String?
    displayName   String?
    profileImage  String?
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt

    // Relationship to GoogleAuth for storing tokens
    googleAuth GoogleAuth?
    Quiz       Quiz[]
}

model GoogleAuth {
    id           String   @id @default(cuid())
    accessToken  String
    refreshToken String?
    idToken      String   @db.Text // Using Text type as JWT tokens can be quite long
    tokenType    String
    scope        String
    expiryDate   DateTime

    // Relationship with User
    userId String @unique
    user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Quiz {
    id         String     @id @default(cuid())
    userId     String     @map("user_id")
    config     Json
    maxNos     Int
    currentNos Int        @default(0)
    status     QuizStatus @default(STARTING)
    createdAt  DateTime   @default(now())
    updatedAt  DateTime   @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    
    quizQuestions QuizQuestion[]
}

enum QuizStatus {
    STARTING
    GENERATING
    COMPLETED
    FAILED
}

model Question {
    id            String       @id @default(cuid())
    baseId        String
    version       Int
    question      String
    options       String[]
    correctOption Int
    questionType  QuestionType
    metadata      Json? // Extendable field for future question types
    createdAt     DateTime     @default(now())
    updatedAt     DateTime     @updatedAt

    quizQuestions QuizQuestion[]
}

enum QuestionType {
    MULTIPLE_CHOICE
    TRUE_FALSE
    SHORT_ANSWER
}

model QuizQuestion {
    id         String   @id @default(cuid())
    quizId     String
    questionId String
    version    Int
    createdAt  DateTime @default(now())
    updatedAt  DateTime @updatedAt

    quiz     Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)
    question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
}
